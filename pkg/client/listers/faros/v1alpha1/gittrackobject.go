/*
Copyright 2018 Pusher Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pusher/faros/pkg/apis/faros/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GitTrackObjectLister helps list GitTrackObjects.
type GitTrackObjectLister interface {
	// List lists all GitTrackObjects in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GitTrackObject, err error)
	// GitTrackObjects returns an object that can list and get GitTrackObjects.
	GitTrackObjects(namespace string) GitTrackObjectNamespaceLister
	GitTrackObjectListerExpansion
}

// gitTrackObjectLister implements the GitTrackObjectLister interface.
type gitTrackObjectLister struct {
	indexer cache.Indexer
}

// NewGitTrackObjectLister returns a new GitTrackObjectLister.
func NewGitTrackObjectLister(indexer cache.Indexer) GitTrackObjectLister {
	return &gitTrackObjectLister{indexer: indexer}
}

// List lists all GitTrackObjects in the indexer.
func (s *gitTrackObjectLister) List(selector labels.Selector) (ret []*v1alpha1.GitTrackObject, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitTrackObject))
	})
	return ret, err
}

// GitTrackObjects returns an object that can list and get GitTrackObjects.
func (s *gitTrackObjectLister) GitTrackObjects(namespace string) GitTrackObjectNamespaceLister {
	return gitTrackObjectNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GitTrackObjectNamespaceLister helps list and get GitTrackObjects.
type GitTrackObjectNamespaceLister interface {
	// List lists all GitTrackObjects in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GitTrackObject, err error)
	// Get retrieves the GitTrackObject from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GitTrackObject, error)
	GitTrackObjectNamespaceListerExpansion
}

// gitTrackObjectNamespaceLister implements the GitTrackObjectNamespaceLister
// interface.
type gitTrackObjectNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GitTrackObjects in the indexer for a given namespace.
func (s gitTrackObjectNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GitTrackObject, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitTrackObject))
	})
	return ret, err
}

// Get retrieves the GitTrackObject from the indexer for a given namespace and name.
func (s gitTrackObjectNamespaceLister) Get(name string) (*v1alpha1.GitTrackObject, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gittrackobject"), name)
	}
	return obj.(*v1alpha1.GitTrackObject), nil
}
